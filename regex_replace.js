// Регулярные выражения // https://regex101.com/
const str = `Штурмовики группировки ВС РФ "Восток" поразили десятки мест скоплений живой силы ВСУ в . районе Пятихаток на запорожском направлении, сообщил начальник пресс-центра группировки "Восток" Олег Чехов.
РИА новости
Также наши военнослужащие с помощью . ударного беспилотника уничтожили боевую брон5емашину с украинского националистами 5в4 на северо-западе от Приютного.
ТК Звезда новости

Countries and territories where English or an English-based creole is the native language of the 43 majority. 
33 Countries and territories (where) English is an official [ or ] administrative 
language but not a majority native language. Englischmen þeyz hy hadde
`

// new RegExp('шаблон', 'флаги')
const r1 = new RegExp('новости', 'g') // [ 'новости', 'новости' ]

// . - любой одиночный символ
const r2 = new RegExp('по.', 'g') // [ 'пор', 'пор', 'пом' ]

// [] - любой из них
const r3 = new RegExp('[Шш].', 'g') // [ 'Шт', 'ши', 'ши' ]

// внутри [] можно указать диапазон
const r4 = new RegExp('[э-я].', 'g') // [ 'ят', 'ят', 'ю ', 'ю ', 'ют' ]
const r5 = new RegExp('[1-6].', 'g') // [ 'ят', 'ят', 'ю ', 'ю ', 'ют' ]

// $ - конец строки
// обратный слеш \ - экранирование (напр, ищем точку) (в RegExp \\ ?)
const r6 = new RegExp('\\.$', 'gm') // [ '.', '.' ]

// ^ - начало строки (строки начинаются с Т)
const r7 = new RegExp('^Т', 'gm') // [ 'Т', 'Т' ]

// ^ в [] - отрицание (^[^Т] - строки, начинающиеся не с Т)
const r8 = new RegExp('^[^Т]', 'gm') // [ 'Ш', 'Р' ]

// \d - цифра (можно \d\d\d - 3 цифры подряд)
const r9 = new RegExp('\\d', 'gm') // [ '5', '5', '4' ]

// \D - всё, кроме цифр
const r10 = new RegExp('\\d\\D\\d', 'gm') // [ '5в4' ]

// \s - пробел (слова, заканчивающиеся на ки)
const r11 = new RegExp('ки\\s', 'gm') // [ 'ки ', 'ки ', 'ки ', 'ки ' ]
// \S - всё, кроме пробела

// \w - буква, \W - все, кроме буквы // почему-то с русским хочет работать наоборот
const r12 = new RegExp('\\s\\W\\W\\W\\s', 'gm') // [ ' ВСУ ', '\nРИА ' ]

// \b - границы слова (с рус не оч), напр., слова из 3х букв
const r13 = new RegExp('\\b\\w\\w\\w\\b', 'gm') // [ 'and', 'the', 'the', 'and']

// квантификация:

// сколько раз добжен повторяться символ {n}:
// \w{3} - то же самое, что и выше, можно указать {2,4} - от 2-х до 4-х
const r14 = new RegExp('\\b\\w{3}\\b', 'gm') // [ 'and', 'the', 'the', 'and']

// * - любое кол-во символов (0 и >)
// +  от 1 и > (а ниже - обязательный)
const r15 = new RegExp('ра+', 'gm') // [ 'ра', 'ра', 'ра', 'ра', 'ра' ]

// ? - 0 или 1 раз

// (\s|-) - пробел или тире, можно было так: [/s-]

console.log(str.match(r15)) //